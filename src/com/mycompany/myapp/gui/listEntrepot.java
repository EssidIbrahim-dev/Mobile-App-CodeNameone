package com.mycompany.myapp.gui;

import com.codename1.capture.Capture;
import com.codename1.components.FloatingActionButton;
import com.codename1.components.ImageViewer;
import com.codename1.components.InfiniteProgress;
import com.codename1.components.MultiButton;
import com.codename1.components.OnOffSwitch;
import com.codename1.components.ToastBar;
import com.codename1.contacts.Contact;
import com.codename1.db.Database;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.FileSystemStorage;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.io.Storage;
import com.codename1.io.Util;
import com.codename1.maps.Coord;
import com.codename1.ui.Button;
import com.codename1.ui.CheckBox;
import com.codename1.ui.ComboBox;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import static com.codename1.ui.Component.BOTTOM;
import com.codename1.ui.Container;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import com.codename1.ui.Slider;
import com.codename1.ui.TextField;
import com.codename1.ui.URLImage;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.spinner.Picker;
import com.mycompany.myapp.entities.Entrepot;
import com.mycompany.myapp.entities.Product;
import com.mycompany.myapp.services.ServiceEntrepot;
import com.mycompany.myapp.services.ServiceProduct;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import com.codename1.googlemaps.MapContainer;
import com.codename1.googlemaps.MapContainer.MapObject;
import com.codename1.googlemaps.MapContainer;
import com.codename1.googlemaps.MapContainer.MapObject;
import com.codename1.components.ImageViewer;
import com.codename1.components.InteractionDialog;
import com.codename1.components.SpanLabel;
import com.codename1.components.ToastBar;
import com.codename1.contacts.ContactsManager;
import com.codename1.db.Cursor;
import com.codename1.db.Database;
import com.codename1.db.Row;
import com.codename1.location.Location;
import com.codename1.location.LocationManager;
import com.codename1.maps.Coord;
import com.codename1.maps.MapComponent;
import com.codename1.maps.layers.PointLayer;
import com.codename1.maps.layers.PointsLayer;
import com.codename1.ui.Button;
import com.codename1.ui.ComponentGroup;
import com.codename1.ui.Container;
import com.codename1.ui.Dialog;
import com.codename1.ui.Display;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Image;
import com.codename1.ui.Label;
import com.codename1.ui.Slider;
import com.codename1.ui.TextField;
import com.codename1.ui.URLImage;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.geom.Rectangle;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.plaf.Style;
import com.mycompany.myapp.entities.Entrepot;
import com.mycompany.myapp.services.ServiceEntrepot;
import java.io.IOException;
import java.util.ArrayList;
import static com.codename1.ui.ComponentSelector.$;
import com.codename1.ui.Font;
import com.codename1.ui.TextComponent;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.plaf.RoundBorder;



import javafx.scene.shape.Circle;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class listEntrepot extends SideMenuGestionnaireForm {

    static Image im;
    private Form current;
    private Resources theme;
    private static final String HTML_API_KEY = "AIzaSyAHf38lY58kS9YwVWE3jAitBCAhDJyMskw";
    String URL = "http://localhost/pidev2/web/uploads/post/";
    EncodedImage ecoEncodedImage;
    ImageViewer imgViewer;
    Image img;
    ImageViewer imgaViewer;
    Image imgaa;
    int i;
    ImageViewer imgaViewerdet;
    String sr;
    private Database db;
    private Coord lastLocation;
    Container titleCmp=null;


    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    private Label createForFont(Font fnt, String s) {
        Label l = new Label(s);
        l.getUnselectedStyle().setFont(fnt);
        return l;
    }

    public void start() {
        try {
            Form hi = new Form("Entrepot List", BoxLayout.y());
             Toolbar tb = getToolbar();
                      tb=hi.getToolbar();

        tb.setTitleCentered(false);
         
        Button menuButton = new Button("");
        menuButton.setUIID("Title");
        FontImage.setMaterialIcon(menuButton, FontImage.MATERIAL_MENU);
        menuButton.addActionListener(e -> getToolbar().openSideMenu());
         Container remainingTasks = BoxLayout.encloseY(
                        new Label("12", "CenterTitle"),
                        new Label("users", "CenterSubTitle")
                );
        remainingTasks.setUIID("RemainingTasks");
        Container completedTasks = BoxLayout.encloseY(
                        new Label("32", "CenterTitle"),
                        new Label("employees", "CenterSubTitle")
        );
        completedTasks.setUIID("CompletedTasks");
         titleCmp= BoxLayout.encloseY(
                        FlowLayout.encloseIn(menuButton),
                        BorderLayout.centerAbsolute(
                                BoxLayout.encloseY(
                                    new Label(LoginForm.nom+" "+LoginForm.prenom, "Title"),
                                    new Label("Client", "SubTitle")
                                )
                            ),
                         GridLayout.encloseIn(2, remainingTasks, completedTasks)
                );
         tb.setTitleComponent(titleCmp);
            setupSideMenu(theme);
            Image in = Image.createImage("/bes.jpg");
            hi.setBgImage(in);
             FloatingActionButton fab = FloatingActionButton.createFAB(FontImage.MATERIAL_ADD);
            fab.getAllStyles().setBgColor(0x2e4345);
            fab.createSubFAB(FontImage.MATERIAL_HOUSE, "").addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    new AddEntrepot();
                }
            });
            fab.createSubFAB(FontImage.MATERIAL_IMPORT_CONTACTS, "").addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    try {
                        new ajoutprod().start();
                    } catch (IOException ex) {
                    }
                }
            });
            fab.bindFabToContainer(hi.getContentPane());
            try {
                ecoEncodedImage = EncodedImage.create("/giphy.gif");
                ecoEncodedImage.scale(70, 70);
            } catch (IOException ex) {
                
            }
            int fiveMM = Display.getInstance().convertToPixels(5);
            
            ArrayList<Entrepot> EntrepotL = new ArrayList<>();
            for (i = 0; i < ServiceEntrepot.getInstance().getAllEntrepot().size(); i++) {
                
                int idd = ServiceEntrepot.getInstance().getAllEntrepot().get(i).getId();
                String address = ServiceEntrepot.getInstance().getAllEntrepot().get(i).getAddress();
                String latitude = ServiceEntrepot.getInstance().getAllEntrepot().get(i).getLatitude();
                String longitude = ServiceEntrepot.getInstance().getAllEntrepot().get(i).getLongitude();
                String phone = ServiceEntrepot.getInstance().getAllEntrepot().get(i).getPhone();
                String phonebis = ServiceEntrepot.getInstance().getAllEntrepot().get(i).getPhone_bis();
                int nbrRangs = ServiceEntrepot.getInstance().getAllEntrepot().get(i).getNbrRangs();
                int stock_id = ServiceEntrepot.getInstance().getAllEntrepot().get(i).getStock_id();
                Entrepot t = new Entrepot(idd, address, nbrRangs, phone, phonebis, latitude, longitude, stock_id);
                EntrepotL.add(t);
                Label addr = new Label();
            }
            Toolbar.setGlobalToolbar(true);
            
            hi.add(new InfiniteProgress());
            Display.getInstance().scheduleBackgroundTask(() -> {
                // this will take a while...
                Contact[] cnts = Display.getInstance().getAllContacts(true, true, true, true, false, false);
                Display.getInstance().callSerially(() -> {
                    hi.removeAll();
                    for (Entrepot c1 : EntrepotL) {
                        int j;
                        MultiButton m = new MultiButton();
                        try {
                            for (j = 1; j < EntrepotL.size(); j++) {
                                im = Image.createImage("/entrepot.png");
                                //    imgViewer=new ImageViewer(im);
                                
                                m.setTextLine1(c1.getAddress());
                                m.setTextLine2(c1.getPhone_bis());
                                m.setIcon((im.fill(300, 300)));
                                //System.out.println("/"+j+".png");
                            }
                            
                            // m.setIcon((img.fill(300, 300)));
                            m.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent evt) {
                                    
                                    try {
                                        Form EntrepotDetail = new Form(new BoxLayout(BoxLayout.Y_AXIS));
                                        Image i = Image.createImage("/bes.jpg");
                                        EntrepotDetail.setBgImage(i);
                                       // EntrepotDetail.getToolbar().addMaterialCommandToLeftBar("", FontImage.MATERIAL_ARROW_BACK, e -> hi.showBack());
                                        int idd = c1.getId();
                                        Font largeBoldProportionalFont = Font.createSystemFont(Font.FACE_PROPORTIONAL, Font.STYLE_BOLD, Font.SIZE_LARGE);
                                        Font largePlainProportionalFont = Font.createSystemFont(Font.FACE_PROPORTIONAL, Font.STYLE_PLAIN, Font.SIZE_LARGE);
                                        
                                        Container But = new Container(new BoxLayout(BoxLayout.X_AXIS));
                                        Container nbr = new Container(new BoxLayout(BoxLayout.X_AXIS));
                                        Container detP = new Container(new BoxLayout(BoxLayout.Y_AXIS));
                                        Container det = new Container(new BoxLayout(BoxLayout.X_AXIS));
                                        Container det2 = new Container(new BoxLayout(BoxLayout.Y_AXIS));
                                        Container det3 = new Container(new BoxLayout(BoxLayout.X_AXIS));
                                        Container det4 = new Container(new BoxLayout(BoxLayout.Y_AXIS));
                                        Container det5 = new Container(new BoxLayout(BoxLayout.X_AXIS));
                                        Container det6 = new Container(new BoxLayout(BoxLayout.Y_AXIS));
                                        Container det7 = new Container(new BoxLayout(BoxLayout.X_AXIS));
                                        Container det8 = new Container(new BoxLayout(BoxLayout.Y_AXIS));
                                        Container det9 = new Container(new BoxLayout(BoxLayout.X_AXIS));
                                        Container det10 = new Container(new BoxLayout(BoxLayout.Y_AXIS));
                                        im = Image.createImage("/entrepot.png");
                                        imgaViewerdet = new ImageViewer(im);
                                        EntrepotDetail.add(imgaViewerdet);
                                        Label n = new Label("jjj");
                                        n.setVisible(false);
                                        EntrepotDetail.add(n);
                                        EntrepotDetail.add(createForFont(largeBoldProportionalFont, "        Address    :   " + c1.getAddress()));
                                        Label nn = new Label("jjj");
                                        nn.setVisible(false);
                                        EntrepotDetail.add(nn);
                                        EntrepotDetail.add(createForFont(largeBoldProportionalFont, "        NbRangs   :   " + (Float.toString(c1.getNbrRangs()))));
                                        Label nnn = new Label("jjj");
                                        nnn.setVisible(false);
                                        EntrepotDetail.add(nnn);
                                        EntrepotDetail.add(createForFont(largeBoldProportionalFont, "        Phone       :   " + c1.getPhone()));
                                        Label nno = new Label("jjj");
                                        nno.setVisible(false);
                                        EntrepotDetail.add(nno);
                                        EntrepotDetail.add(createForFont(largeBoldProportionalFont, "        Phone Bis :   " + c1.getPhone_bis()));
                                        Label no = new Label("jjj");
                                        no.setVisible(false);
                                        EntrepotDetail.add(no);
                                        
                                        Picker pick = new Picker();
                                        pick.setStrings("Edit", "Maps", "Delete");
                                        pick.setSelectedString("               Choose Option");
                                        
                                        pick.addActionListener((e) -> {
                                            String s = pick.getSelectedString().toLowerCase();
                                        });
                                        
                                        Style s = UIManager.getInstance().getComponentStyle("Title");
                                        FontImage Register = FontImage.createMaterial(FontImage.MATERIAL_ADD_CALL, s);
                                        ImageViewer iv = new ImageViewer(Register);
                                        /*EntrepotDetail.getToolbar().addCommandToRightBar(" Add Contact", Register, (ev) -> {
                                            Form CreateContact = new Form("           Create Contact", new BoxLayout(BoxLayout.Y_AXIS));
                                            CreateContact.getToolbar().addMaterialCommandToLeftBar("", FontImage.MATERIAL_ARROW_BACK, e -> EntrepotDetail.showBack());
                                            /*    TextComponent tfFirstname = new TextComponent().label("Firstname");
                                            TextComponent tfFamilyname = new TextComponent().label("Familyname");
                                            TextComponent tfOfficePhone = new TextComponent().label("OfficePhone");
                                            TextComponent tfCellPhone = new TextComponent().label("CellPhone");
                                            TextComponent tfEmail = new TextComponent().label("Email");
                                            TextComponent tfAdress = new TextComponent().label("Address");
                                            // TextComponent tfFirstname = new TextComponent().label("Product Name");
                                            Label LFirstname = new Label("    FirstName :");
                                            TextField tfFirstname = new TextField("");
                                            tfFirstname.getUnselectedStyle().setBorder(
                                                    RoundBorder.create().color(0xbbf0ed).rectangle(true));
                                            Label LFamily = new Label("    Familyname :");
                                            TextField tfFamilyname = new TextField("");
                                            
                                            tfFamilyname.getUnselectedStyle().setBorder(
                                                    RoundBorder.create().color(0xbbf0ed).rectangle(true));
                                            
                                            Label LOfficePhone = new Label("    OfficePhone");
                                            TextField tfOfficePhone = new TextField("");
                                            tfOfficePhone.getUnselectedStyle().setBorder(
                                                    RoundBorder.create().color(0xbbf0ed).rectangle(true));
                                            
                                            Label LCellPhone = new Label("    CellPhone :");
                                            TextField tfCellPhone = new TextField("");
                                            
                                            tfCellPhone.getUnselectedStyle().setBorder(
                                                    RoundBorder.create().color(0xbbf0ed).rectangle(true));
                                            
                                            Label LEmail = new Label("    Email :");
                                            TextField tfEmail = new TextField("");
                                            
                                            tfEmail.getUnselectedStyle().setBorder(
                                                    RoundBorder.create().color(0xbbf0ed).rectangle(true));
                                            
                                            Label LAdress = new Label("    Address :");
                                            TextField tfAdress = new TextField("");
                                            tfAdress.getUnselectedStyle().setBorder(
                                                    RoundBorder.create().color(0xbbf0ed).rectangle(true));
                                            tfCellPhone.setText(c1.getPhone());
                                            tfOfficePhone.setText(c1.getPhone_bis());
                                            tfAdress.setText(c1.getAddress());
                                            Button AddC = new Button("Add Contact");
                                            
                                            // Form hi = new Form("Layout Animations", new BoxLayout(BoxLayout.Y_AXIS));
                                            AddC.addActionListener(new ActionListener() {
                                                @Override
                                                public void actionPerformed(ActionEvent evt) {
                                                    
                                                    Form Conatact = new Form("Contacts", new BoxLayout(BoxLayout.Y_AXIS));
                                                    Conatact.getToolbar().addMaterialCommandToLeftBar("", FontImage.MATERIAL_ARROW_BACK, e -> EntrepotDetail.showBack());
                                                    
                                                    Conatact.add(new InfiniteProgress());
                                                    int size = Display.getInstance().convertToPixels(5, true);
                                                    FontImage fi = FontImage.createFixed("" + FontImage.MATERIAL_PERSON, FontImage.getMaterialDesignFont(), 0xff, size, size);
                                                    
                                                    Display.getInstance().scheduleBackgroundTask(() -> {
                                                        Display.getInstance().createContact(tfFirstname.getText(), tfFamilyname.getText(), tfOfficePhone.getText(), tfCellPhone.getText(), tfEmail.getText(), tfAdress.getText());
                                                        Contact[] contacts = Display.getInstance().getAllContacts(true, true, false, true, false, false);
                                                        Display.getInstance().callSerially(() -> {
                                                            Conatact.removeAll();
                                                            
                                                            for (Contact c : contacts) {
                                                                //  String cn = ContactsManager.createContact(c1.getAddress(), c1.getAddress(), c1.getPhone_bis(), c1.getPhone_bis(), c1.getPhone(), c1.getAddress());
                                                                
                                                                MultiButton mb = new MultiButton(c.getDisplayName());
                                                                mb.setIcon(fi);
                                                                mb.setTextLine2(c.getPrimaryPhoneNumber());
                                                                
                                                                mb.putClientProperty("id", c.getId());
                                                                //  Conatact.add(mb);
                                                                mb.addPointerPressedListener(new ActionListener() {
                                                                    @Override
                                                                    public void actionPerformed(ActionEvent evt) {
                                                                        
                                                                        Conatact.getContentPane().animateLayout(1000);
                                                                        
//CreateContact.add(fall);
                                                                    }
                                                                });
                                                                Conatact.add(mb);
                                                                Display.getInstance().scheduleBackgroundTask(() -> {
                                                                    Contact cc = ContactsManager.getContactById(c.getId(), false, true, false, false, false);
                                                                    
                                                                    Display.getInstance().callSerially(() -> {
                                                                        Image photo = cc.getPhoto();
                                                                        if (photo != null) {
                                                                            mb.setIcon(photo.fill(size, size));
                                                                            mb.revalidate();
                                                                        }
                                                                    });
                                                                });
                                                            }
                                                            
                                                            try {
                                                                boolean created = Database.exists("MyDB2222.db");
                                                                db = Database.openOrCreate("MyDB22222.db");
                                                                if (db == null) {
                                                                    Form f = new Form("SQLite No Supported");
                                                                    SpanLabel label = new SpanLabel("SQLite is not supported on this platform");
                                                                    f.addComponent(label);
                                                                    f.show();
                                                                    return;
                                                                }
                                                                if (!created) {
                                                                    
                                                                    db.execute("create table contact (firstname text,familyname text,officephone text,cellphone text,email text,address text);");
                                                                    db.execute("insert into contact (firstname,familyname,officephone,cellphone,email,address) values ('" + tfFirstname.getText() + "','" + tfFamilyname.getText() + "','" + tfOfficePhone.getText() + "','" + tfCellPhone.getText() + "','" + tfEmail.getText() + "','" + tfAdress.getText() + "');");
                                                                    
                                                                }
                                                            } catch (IOException ex) {
                                                                ex.printStackTrace();
                                                                throw new RuntimeException(ex.getMessage());
                                                            }
                                                            
                                                            Conatact.getContentPane().animateLayout(150);
                                                        });
                                                    });
                                                    //createContact(c1.getAddress(), c1.getAddress(), c1.getPhone_bis(), c1.getPhone_bis(), c1.getPhone(), c1.getAddress());
                                                    
                                                    Conatact.show();
                                                }
                                            });
                                            CreateContact.addAll(LFirstname, tfFirstname, LFamily, tfFamilyname, LAdress, tfAdress, LCellPhone, tfCellPhone, LOfficePhone, tfOfficePhone, LEmail, tfEmail, AddC);
                                            CreateContact.show();
                                        });
                                        */
                                        Button Edit = new Button("Edit");
                                        Button Delete = new Button("Delete");
                                        pick.addActionListener(new ActionListener() {
                                            @Override
                                            public void actionPerformed(ActionEvent evt) {
                                                switch (pick.getSelectedString()) {
                                                    
                                                    case "Edit":
                                                        pick.setText("Edit");
                                                        break;
                                                        
                                                    case "Maps":
                                                        pick.setText("Maps");
                                                        break;
                                                        
                                                    case "Delete":
                                                        pick.setText("Delete");
                                                        break;
                                                        
                                                }
                                                if (pick.getText() == "Edit") {
                                                    Form EditForm = new Form(new BoxLayout(BoxLayout.Y_AXIS));
                                                    
                                                    EditForm.setTitle("   Edit Entrepot");
                                                    Label LAddress = new Label("    Address ");
                                                    TextField tfAdress = new TextField("");
                                                    
                                                    tfAdress.getUnselectedStyle().setBorder(
                                                            RoundBorder.create().color(0xbbf0ed).rectangle(true));
                                                    
                                                    tfAdress.setText(c1.getAddress());
                                                    Label LPhone = new Label("    Phone ");
                                                    TextField tfPhone = new TextField("");
                                                    
                                                    tfPhone.getUnselectedStyle().setBorder(
                                                            RoundBorder.create().color(0xbbf0ed).rectangle(true));
                                                    
                                                    tfPhone.setText(c1.getPhone());
                                                    Label LPhoneB = new Label("    PhoneBis ");
                                                    TextField tfPhoneB = new TextField("");
                                                    
                                                    tfPhoneB.getUnselectedStyle().setBorder(
                                                            RoundBorder.create().color(0xbbf0ed).rectangle(true));
                                                    
                                                    tfPhoneB.setText(c1.getPhone_bis());
                                                    Label LNbr = new Label("    NbrRangs ");
                                                    TextField tfNbr = new TextField("");
                                                    
                                                    tfNbr.getUnselectedStyle().setBorder(
                                                            RoundBorder.create().color(0xbbf0ed).rectangle(true));
                                                    
                                                    tfNbr.setText(Integer.toString(c1.getNbrRangs()));
                                                    Label LLatitude = new Label("    Latitude ");
                                                    TextField tfLatitude = new TextField("");
                                                    
                                                    tfLatitude.getUnselectedStyle().setBorder(
                                                            RoundBorder.create().color(0xbbf0ed).rectangle(true));
                                                    
                                                    tfLatitude.setText(c1.getLatitude());
                                                    Label LLongitude = new Label("    Longitude ");
                                                    TextField tfLongitude = new TextField("");
                                                    
                                                    tfLongitude.getUnselectedStyle().setBorder(
                                                            RoundBorder.create().color(0xbbf0ed).rectangle(true));
                                                    
                                                    tfLongitude.setText(c1.getLongitude());
                                                    // Button btnEdit = new Button("Edit");
                                                    Style s = UIManager.getInstance().getComponentStyle("Title");
                                                    FontImage icon2 = FontImage.createMaterial(FontImage.MATERIAL_DONE, s);
                                                    ImageViewer iv2 = new ImageViewer(icon2);
                                                    EditForm.getToolbar().addCommandToRightBar("Edit", icon2, (evtv) -> {
                                                        
                                                        try {
                                                            
                                                            Entrepot e = new Entrepot(c1.getId(), tfAdress.getText(), Integer.valueOf(tfNbr.getText()), tfPhone.getText(),
                                                                    tfPhoneB.getText(), tfLongitude.getText(), tfLatitude.getText());
                                                            if (ServiceEntrepot.getInstance().editEntrepot(e)) {
                                                                //Dialog.show("Success", "Entrepot edited successfully ", new Command("OK"));
                                                                try {
                                                                    // Dialog.show("Success", "Connection accepted", new Command("OK"));
                                                                    
                                                                    InteractionDialog dialog = new InteractionDialog("Success");
                                                                    dialog.setLayout(new BorderLayout());
                                                                    SpanLabel ll = new SpanLabel("Entrepot Edited Successfuly");
                                                                    Image ix = Image.createImage("/suuccess.png");
                                                                    Label imap = new Label(ix.fill(300, 300));
                                                                    dialog.add(BorderLayout.CENTER, GridLayout.encloseIn(2, imap, ll));
                                                                    Button close = new Button("Close");
                                                                    close.addActionListener(new ActionListener() {
                                                                        @Override
                                                                        public void actionPerformed(ActionEvent evt) {
                                                                            dialog.disposeToTheTop();
                                                                            new listEntrepot().start();
                                                                        }
                                                                    });
                                                                    dialog.add(BorderLayout.SOUTH, close);
                                                                    dialog.show(750, 750, 0, 0);
                                                                } catch (IOException ex) {
                                                                }
                                                                
                                                            } else {
                                                                //Dialog.show("ERROR", "error please try again", new Command("OK"));
                                                                try {
                                                                    //Dialog.show("ERROR", "Server error", new Command("OK"));
                                                                    InteractionDialog dialog = new InteractionDialog("ERROR");
                                                                    dialog.setLayout(new BorderLayout());
                                                                    SpanLabel ll = new SpanLabel("Error please try again");
                                                                    Image ix = Image.createImage("/err.jpg");
                                                                    Label imap = new Label(ix.fill(200, 200));
                                                                    dialog.add(BorderLayout.CENTER, GridLayout.encloseIn(2, imap, ll));
                                                                    Button close = new Button("Close");
                                                                    close.addActionListener(new ActionListener() {
                                                                        @Override
                                                                        public void actionPerformed(ActionEvent evt) {
                                                                            dialog.disposeToTheTop();
                                                                            
                                                                            // dest.show();
                                                                        }
                                                                    });
                                                                    dialog.add(BorderLayout.SOUTH, close);
                                                                    dialog.show(750, 750, 0, 0);
                                                                } catch (IOException ex) {
                                                                }
                                                            }
                                                        } catch (NumberFormatException e) {
                                                            // Dialog.show("ERROR", "Check the input please", new Command("OK"));
                                                            try {
                                                                //Dialog.show("ERROR", "Status must be a number", new Command("OK"));
                                                                InteractionDialog dialog = new InteractionDialog("ERROR");
                                                                dialog.setLayout(new BorderLayout());
                                                                SpanLabel ll = new SpanLabel("Check the input please");
                                                                Image ix = Image.createImage("/err.jpg");
                                                                Label imap = new Label(ix.fill(200, 200));
                                                                dialog.add(BorderLayout.CENTER, GridLayout.encloseIn(2, imap, ll));
                                                                Button close = new Button("Close");
                                                                close.addActionListener(new ActionListener() {
                                                                    @Override
                                                                    public void actionPerformed(ActionEvent evt) {
                                                                        dialog.disposeToTheTop();

                                                                        // dest.show();
                                                                    }
                                                                });
                                                                dialog.add(BorderLayout.SOUTH, close);
                                                                dialog.show(750, 750, 0, 0);
                                                                
                                                                // dest.show();
                                                            } catch (IOException ex) {
                                                            }
                                                        }
                                                        
                                                    });
                                                    
                                                    EditForm.addAll(LAddress, tfAdress, LPhone, tfPhone, LPhoneB, tfPhoneB, LNbr, tfNbr, LLatitude, tfLatitude, LLongitude, tfLongitude);
                                                    EditForm.getToolbar().addMaterialCommandToLeftBar("", FontImage.MATERIAL_ARROW_BACK, e -> EntrepotDetail.showBack());
                                                    EditForm.show();
                                                } else if (pick.getText() == "Delete") {
                                                    if (ServiceEntrepot.getInstance().deleteEntrepot(c1.getId())) {
                                                       // Dialog.show("Success", "Entrepot deleted", new Command("OK"));
                                                        try {
                                                            // Dialog.show("Success", "Connection accepted", new Command("OK"));
                                                            
                                                            InteractionDialog dialog = new InteractionDialog("Success");
                                                            dialog.setLayout(new BorderLayout());
                                                            SpanLabel ll = new SpanLabel("Product Deleted Successfuly");
                                                            Image ix = Image.createImage("/suuccess.png");
                                                            Label imap = new Label(ix.fill(300, 300));
                                                            dialog.add(BorderLayout.CENTER, GridLayout.encloseIn(2, imap, ll));
                                                            Button close = new Button("Close");
                                                            close.addActionListener(new ActionListener() {
                                                                @Override
                                                                public void actionPerformed(ActionEvent evt) {
                                                                    dialog.disposeToTheTop();
                                                                    new listEntrepot().start();
                                                                    //hi.show();
                                                                }
                                                            });
                                                            dialog.add(BorderLayout.SOUTH, close);
                                                            dialog.show(750, 750, 0, 0);
                                                        } catch (IOException ex) {
                                                        }
                                                        
                                                    } else {
                                                        //Dialog.show("ERROR", "Please try again", new Command("OK"));
                                                        try {
                                                            //Dialog.show("ERROR", "Server error", new Command("OK"));
                                                            InteractionDialog dialog = new InteractionDialog("ERROR");
                                                            dialog.setLayout(new BorderLayout());
                                                            SpanLabel ll = new SpanLabel("Error please try again");
                                                            Image ix = Image.createImage("/err.jpg");
                                                            Label imap = new Label(ix.fill(200, 200));
                                                            dialog.add(BorderLayout.CENTER, GridLayout.encloseIn(2, imap, ll));
                                                            Button close = new Button("Close");
                                                            close.addActionListener(new ActionListener() {
                                                                @Override
                                                                public void actionPerformed(ActionEvent evt) {
                                                                    dialog.disposeToTheTop();

                                                                    // dest.show();
                                                                }
                                                            });
                                                            dialog.add(BorderLayout.SOUTH, close);
                                                            dialog.show(750, 750, 0, 0);
                                                        } catch (IOException ex) {
                                                        }
                                                    }
                                                } else if (pick.getText() == "Maps") {
                                                    try {
                                                        Form hii = new Form("     Google Maps");
                                                        hii.getToolbar().addMaterialCommandToLeftBar("", FontImage.MATERIAL_ARROW_BACK, e -> EntrepotDetail.showBack());
                                                        
                                                        hii.setLayout(new BorderLayout());
                                                        final MapContainer cnt = new MapContainer(HTML_API_KEY);
                                                        String lat = c1.getLatitude();
                                                        String lat1 = lat.replace('°', '.');
                                                        String lon = c1.getLongitude();
                                                        String lon1 = lon.replace('°', '.');
                                                        
                                                        Button btnMoveCamera = new Button("Move Camera");
                                                        btnMoveCamera.addActionListener(e -> {
                                                            
                                                            cnt.setCameraPosition(new Coord(Float.parseFloat(lat1), Float.parseFloat(lon1)));
                                                        });
                                                        Style s = new Style();
                                                        s.setFgColor(0xff0000);
                                                        s.setBgTransparency(0);
                                                        Image mapI = Image.createImage("/red_pin.png");
                                                        
                                                        FontImage markerImg = FontImage.createMaterial(FontImage.MATERIAL_PLACE, s, Display.getInstance().convertToPixels(3));
                                                        
                                                        Button btnAddMarker = new Button("Add Marker");
                                                        btnAddMarker.addActionListener(e -> {
                                                            
                                                            cnt.setCameraPosition(new Coord(Float.parseFloat(lat1), Float.parseFloat(lon1)));
                                                            cnt.addMarker(
                                                                    EncodedImage.createFromImage(markerImg, false),
                                                                    cnt.getCameraPosition(),
                                                                    "Hi marker",
                                                                    "Optional long description",
                                                                    evt2 -> {
                                                                        ToastBar.showMessage("You clicked the marker", FontImage.MATERIAL_PLACE);
                                                                    }
                                                            );

                                                        });
                                                        
                                                        Button btnAddPath = new Button("Add Path");
                                                        Location position = LocationManager.getLocationManager().getCurrentLocationSync();

                                                        btnAddPath.addActionListener(e -> {
                                                        System.out.println(position.getLatitude());
                                                        System.out.println(position.getLatitude());                                                            
                                                            cnt.addPath(
                                                                    cnt.getCameraPosition(),
                                                                    new Coord(position.getLatitude(), position.getLongitude()));
                                                        });
                                                        
                                                        Button btnClearAll = new Button("Clear All");
                                                        btnClearAll.addActionListener(e -> {
                                                            cnt.clearMapLayers();
                                                        });
                                                        
                                                        cnt.addTapListener(e -> {
                                                            TextField enterName = new TextField();
                                                            Container wrapper = BoxLayout.encloseY(new Label("Name:"), enterName);
                                                            InteractionDialog dlg = new InteractionDialog("Add Marker");
                                                            dlg.getContentPane().add(wrapper);
                                                            enterName.setDoneListener(e2 -> {
                                                                String txt = enterName.getText();
                                                                cnt.addMarker(
                                                                        EncodedImage.createFromImage(markerImg, false),
                                                                        cnt.getCoordAtPosition(e.getX(), e.getY()),
                                                                        enterName.getText(),
                                                                        "",
                                                                        e3 -> {
                                                                            ToastBar.showMessage("You clicked " + txt, FontImage.MATERIAL_PLACE);
                                                                        }
                                                                );
                                                                dlg.dispose();
                                                            });
                                                            dlg.showPopupDialog(new Rectangle(e.getX(), e.getY(), 10, 10));
                                                            enterName.startEditingAsync();
                                                        });
                                                        
                                                        Container root = LayeredLayout.encloseIn(
                                                                BorderLayout.center(cnt),
                                                                BorderLayout.south(
                                                                        FlowLayout.encloseBottom(btnMoveCamera, btnAddMarker, btnAddPath, btnClearAll)
                                                                )
                                                        );
                                                        
                                                        hii.add(BorderLayout.CENTER, root);
                                                        hii.show();
                                                    } catch (IOException ex) {
                                                    }
                                                    
                                                }
                                            }
                                        });
                                        
                                        /*
                                        
                                        //EDIT product
                                        Edit.addActionListener(new ActionListener() {
                                        @Override
                                        public void actionPerformed(ActionEvent evt) {
                                        Form EditForm = new Form(new BoxLayout(BoxLayout.Y_AXIS));
                                        
                                        EditForm.setTitle("Edit Entrepot");
                                        TextField tfAdress = new TextField("");
                                        tfAdress.setText(c1.getAddress());
                                        TextField tfPhone = new TextField("");
                                        tfPhone.setText(c1.getPhone());
                                        TextField tfPhoneB = new TextField("");
                                        tfPhoneB.setText(c1.getPhone_bis());
                                        TextField tfNbr = new TextField("");
                                        tfNbr.setText(Float.toString(c1.getNbrRangs()));
                                        TextField tfLatitude = new TextField("");
                                        tfLatitude.setText(c1.getLatitude());
                                        TextField tfLongitude = new TextField("");
                                        tfLongitude.setText(c1.getLongitude());
                                        Button btnEdit = new Button("Edit Entrepot");
                                        btnEdit.addActionListener(new ActionListener() {
                                        @Override
                                        public void actionPerformed(ActionEvent evt) {
                                        if ((tfAdress.getText().length() == 0) || (tfLatitude.getText().length() == 0)
                                        || (tfLongitude.getText().length() == 0) || (tfNbr.getText().length() == 0)
                                        || (tfPhone.getText().length() == 0) || (tfPhoneB.getText().length() == 0)) {
                                        Dialog.show("Alert", "Please fill all the fields", new Command("OK"));
                                        } else {
                                        try {
                                        
                                        Entrepot e = new Entrepot(c1.getId(), tfAdress.getText(), Integer.valueOf(tfNbr.getText()), tfPhone.getText(),
                                        tfPhoneB.getText(), tfLongitude.getText(), tfLatitude.getText());
                                        if (ServiceEntrepot.getInstance().editEntrepot(e)) {
                                        Dialog.show("Success", "Entrepot edited successfully ", new Command("OK"));
                                        hi.revalidate();
                                        hi.show();
                                        } else {
                                        Dialog.show("ERROR", "error please try again", new Command("OK"));
                                        
                                        }
                                        } catch (NumberFormatException e) {
                                        Dialog.show("ERROR", "Check the input please", new Command("OK"));
                                        }
                                        
                                        }
                                        
                                        }
                                        });
                                        EditForm.addAll(tfAdress, tfPhone, tfPhoneB, tfNbr, tfLatitude, tfLongitude, btnEdit);
                                        EditForm.getToolbar().addMaterialCommandToLeftBar("", FontImage.MATERIAL_ARROW_BACK, e -> EntrepotDetail.showBack());
                                        EditForm.show();
                                        }
                                        });
                                        */
                                        //Delete Product
                                        /*           Delete.addActionListener(new ActionListener() {
                                        @Override
                                        public void actionPerformed(ActionEvent evt) {
                                        if (ServiceEntrepot.getInstance().deleteEntrepot(c1.getId())) {
                                        Dialog.show("Success", "Entrepot deleted", new Command("OK"));
                                        hi.show();
                                        } else {
                                        Dialog.show("ERROR", "Please try again", new Command("OK"));
                                        }
                                        }
                                        });
                                        */
                                        det6.add(det5);
                                        Label bt = new Label("Phone bis:");
                                        Label EntrepotType = new Label(c1.getPhone_bis());
                                        Button Maps = new Button("Show Maps");
                                        // det7.add(bt);
                                        //  det7.add(EntrepotType);
                                        //det8.add(det7);
                                        detP.add(det2);
                                        detP.add(det4);
                                        detP.add(det6);
                                        // detP.add(det8);
                                        
                                        String rr = c1.getLatitude();
                                        if (rr.contains("°")) {
                                            String ss = rr.replace('°', '.');
                                            
                                            System.out.println(ss);
                                        } else {
                                            System.out.println("nonn");
                                        }
                                        
                                        /*           Maps.addActionListener(new ActionListener() {
                                        @Override
                                        public void actionPerformed(ActionEvent evt) {
                                        
                                        Form hii = new Form("Native Maps Test");
                                        hii.getToolbar().addMaterialCommandToLeftBar("", FontImage.MATERIAL_ARROW_BACK, e -> EntrepotDetail.showBack());
                                        
                                        hii.setLayout(new BorderLayout());
                                        final MapContainer cnt = new MapContainer(HTML_API_KEY);
                                        String lat = c1.getLatitude();
                                        String lat1 = lat.replace('°', '.');
                                        String lon = c1.getLongitude();
                                        String lon1 = lon.replace('°', '.');
                                        
                                        Button btnMoveCamera = new Button("Move Camera");
                                        btnMoveCamera.addActionListener(e -> {
                                        
                                        cnt.setCameraPosition(new Coord(Float.parseFloat(lat1), Float.parseFloat(lon1)));
                                        });
                                        Style s = new Style();
                                        s.setFgColor(0xff0000);
                                        s.setBgTransparency(0);
                                        FontImage markerImg = FontImage.createMaterial(FontImage.MATERIAL_PLACE, s, Display.getInstance().convertToPixels(3));
                                        
                                        Button btnAddMarker = new Button("Add Marker");
                                        btnAddMarker.addActionListener(e -> {
                                        
                                        cnt.setCameraPosition(new Coord(Float.parseFloat(lat1), Float.parseFloat(lon1)));
                                        cnt.addMarker(
                                        EncodedImage.createFromImage(markerImg, false),
                                        cnt.getCameraPosition(),
                                        "Hi marker",
                                        "Optional long description",
                                        evt2 -> {
                                        ToastBar.showMessage("You clicked the marker", FontImage.MATERIAL_PLACE);
                                        }
                                        );
                                        
                                        });
                                        
                                        Button btnAddPath = new Button("Add Path");
                                        btnAddPath.addActionListener(e -> {
                                        
                                        cnt.addPath(
                                        cnt.getCameraPosition(),
                                        new Coord(-33.866, 151.195), // Sydney
                                        new Coord(-18.142, 178.431), // Fiji
                                        new Coord(21.291, -157.821), // Hawaii
                                        new Coord(37.423, -122.091) // Mountain View
                                        );
                                        });
                                        
                                        Button btnClearAll = new Button("Clear All");
                                        btnClearAll.addActionListener(e -> {
                                        cnt.clearMapLayers();
                                        });
                                        
                                        cnt.addTapListener(e -> {
                                        TextField enterName = new TextField();
                                        Container wrapper = BoxLayout.encloseY(new Label("Name:"), enterName);
                                        InteractionDialog dlg = new InteractionDialog("Add Marker");
                                        dlg.getContentPane().add(wrapper);
                                        enterName.setDoneListener(e2 -> {
                                        String txt = enterName.getText();
                                        cnt.addMarker(
                                        EncodedImage.createFromImage(markerImg, false),
                                        cnt.getCoordAtPosition(e.getX(), e.getY()),
                                        enterName.getText(),
                                        "",
                                        e3 -> {
                                        ToastBar.showMessage("You clicked " + txt, FontImage.MATERIAL_PLACE);
                                        }
                                        );
                                        dlg.dispose();
                                        });
                                        dlg.showPopupDialog(new Rectangle(e.getX(), e.getY(), 10, 10));
                                        enterName.startEditingAsync();
                                        });
                                        
                                        Container root = LayeredLayout.encloseIn(
                                        BorderLayout.center(cnt),
                                        BorderLayout.south(
                                        FlowLayout.encloseBottom(btnMoveCamera, btnAddMarker, btnAddPath, btnClearAll)
                                        )
                                        );
                                        
                                        hii.add(BorderLayout.CENTER, root);
                                        hii.show();
                                        
                                        }
                                        });*/
                                        // But.add(Edit);
                                        // But.add(Delete);
                                        // But.add(Maps);
                                        EntrepotDetail.add(pick);
                                        
                                        //EntrepotDetail.add(horizontal);
                                        EntrepotDetail.add(nbr);
                                        EntrepotDetail.add(detP);
                                        EntrepotDetail.add(But);
                                        EntrepotDetail.show();
                                    } catch (IOException ex) {
                                    }
                                }
                            });
                            hi.add(m);
                            
                        } catch (IOException ex) {
                        }
                        
                    }
                    
                    hi.revalidate();
                });
            });
            
            hi.getToolbar().addSearchCommand(e -> {
                String text = (String) e.getSource();
                if (text == null || text.length() == 0) {
                    // clear search
                    for (Component cmp : hi.getContentPane()) {
                        cmp.setHidden(false);
                        cmp.setVisible(true);
                    }
                    hi.getContentPane().animateLayout(150);
                } else {
                    text = text.toLowerCase();
                    for (Component cmp : hi.getContentPane()) {
                        MultiButton mb = (MultiButton) cmp;
                        String line1 = mb.getTextLine1();
                        String line2 = mb.getTextLine2();
                        boolean show = line1 != null && line1.toLowerCase().indexOf(text) > -1
                                || line2 != null && line2.toLowerCase().indexOf(text) > -1;
                        mb.setHidden(!show);
                        mb.setVisible(show);
                    }
                    hi.getContentPane().animateLayout(150);
                }
            }, 4);
            
            hi.show();
        } catch (IOException ex) {

        }
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

    @Override
    protected void showOtherForm(Resources res) {
        new ProfileGestionnaireForm(res).show();
    }

    @Override
    protected void showOtherForm1(Resources res) {
        new ProfileGestionnaireForm(res).show();
    }

    @Override
    protected void showOtherForm2(Resources res) {
        new ProfileGestionnaireForm(res).show();
    }

    @Override
    protected void showOtherForm3(Resources res) {
        new ProfileGestionnaireForm(res).show();
    }

}
