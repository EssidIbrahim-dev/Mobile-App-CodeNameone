package com.mycompany.myapp.gui;

import com.codename1.capture.Capture;
import com.codename1.components.FloatingActionButton;
import com.codename1.components.ImageViewer;
import com.codename1.components.InfiniteProgress;
import com.codename1.components.InteractionDialog;
import com.codename1.components.MultiButton;
import com.codename1.components.OnOffSwitch;
import com.codename1.components.SpanLabel;
import com.codename1.contacts.Contact;
import com.codename1.db.Database;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.FileSystemStorage;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.io.Storage;
import com.codename1.io.Util;
import com.codename1.ui.Button;
import com.codename1.ui.CheckBox;
import com.codename1.ui.ComboBox;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import static com.codename1.ui.Component.BOTTOM;
import com.codename1.ui.Container;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import com.codename1.ui.Slider;
import com.codename1.ui.TextField;
import com.codename1.ui.URLImage;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.spinner.Picker;
import com.mycompany.myapp.entities.Product1;
import com.mycompany.myapp.services.ProductService;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import static com.codename1.ui.ComponentSelector.$;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextComponent;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.animations.FlipTransition;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.layouts.TextModeLayout;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.plaf.RoundBorder;



/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class ajoutprod extends SideMenuGestionnaireForm  {

    private Form current;
    private Resources theme;
    String URL = "http://localhost/pidev/web/uploads/post/";
    String url = "http://localhost/images/";
    EncodedImage ecoEncodedImage;
    ImageViewer imgaViewer;
    Image imgaa;
    ImageViewer imgViewer;
    Image img;
    int i;
    ImageViewer imgaViewerdet;
    static String filePath;
    Container titleCmp=null;


    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme_1");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() throws IOException {

        // step 1 for creating product
        Toolbar.setGlobalToolbar(true);
        Image i = Image.createImage("/bes.jpg");
        Form hi = new Form("      Step 1/3 ", new BoxLayout(BoxLayout.Y_AXIS));
         Toolbar tb = getToolbar();
                      tb=hi.getToolbar();

        tb.setTitleCentered(false);
         
        Button menuButton = new Button("");
        menuButton.setUIID("Title");
        FontImage.setMaterialIcon(menuButton, FontImage.MATERIAL_MENU);
        menuButton.addActionListener(e -> getToolbar().openSideMenu());
         Container remainingTasks = BoxLayout.encloseY(
                        new Label("12", "CenterTitle"),
                        new Label("users", "CenterSubTitle")
                );
        remainingTasks.setUIID("RemainingTasks");
        Container completedTasks = BoxLayout.encloseY(
                        new Label("32", "CenterTitle"),
                        new Label("employees", "CenterSubTitle")
        );
        completedTasks.setUIID("CompletedTasks");
         titleCmp= BoxLayout.encloseY(
                        FlowLayout.encloseIn(menuButton),
                        BorderLayout.centerAbsolute(
                                BoxLayout.encloseY(
                                    new Label(LoginForm.nom+" "+LoginForm.prenom, "Title"),
                                    new Label("Client", "SubTitle")
                                )
                            ),
                         GridLayout.encloseIn(2, remainingTasks, completedTasks)
                );
         tb.setTitleComponent(titleCmp);
            setupSideMenu(theme);
        hi.setBgImage(i);
        TextModeLayout tl = new TextModeLayout(7, 5);
        Button btnValider = new Button("Add Product");
        Label tfN = new Label("hjh");
        Label tf = new Label("hjh");
        Label tfNo = new Label("jkj");
        Label tfNon = new Label("jkj");
        Label tfNone = new Label("jjk");
        tfN.setVisible(false);
        tf.setVisible(false);
        tfNo.setVisible(false);
        tfNon.setVisible(false);
        tfNone.setVisible(false);
        //TextComponent tfName = new TextComponent().label("Product Name");
        
        Label LName = new Label("      Product Name ");
        TextField tfName = new TextField("");
        tfName.getUnselectedStyle().setBorder(
        RoundBorder.create().color(0xbbf0ed).rectangle(true));
        
        //TextComponent tfType = new TextComponent().label("Product Type");
        Label LType = new Label("      Product Type ");
        TextField tfType = new TextField("");
        tfType.getUnselectedStyle().setBorder(
        RoundBorder.create().color(0xbbf0ed).rectangle(true));
        
        //TextComponent tfMarque = new TextComponent().label("Marque");
        
        Label LMarque = new Label("      Marque ");
        TextField tfMarque = new TextField("");
        tfMarque.getUnselectedStyle().setBorder(
        RoundBorder.create().color(0xbbf0ed).rectangle(true));
        
        //TextComponent tfPriceHT = new TextComponent().label("PriceHT");
        
        Label LPriceHT = new Label("      PriceHT");
        TextField tfPriceHT = new TextField("");
        tfPriceHT.getUnselectedStyle().setBorder(
        RoundBorder.create().color(0xbbf0ed).rectangle(true));
        
        //TextComponent tfPriceTTC = new TextComponent().label("PriceTTC");
        
        Label LPriceTTC = new Label("      PriceTTC ");
        TextField tfPriceTTC = new TextField("");
        tfPriceTTC.getUnselectedStyle().setBorder(
        RoundBorder.create().color(0xbbf0ed).rectangle(true));
        
        //TextComponent tfTva = new TextComponent().label("Tva");
        
        Label LTva = new Label("      Tva ");
        TextField tfTva = new TextField("");
        tfTva.getUnselectedStyle().setBorder(
        RoundBorder.create().color(0xbbf0ed).rectangle(true));
        
        //TextComponent tfReference = new TextComponent().label("Refernce");
        
        Label LReference = new Label("      Refernce ");
        TextField tfReference = new TextField("");
        tfReference.getUnselectedStyle().setBorder(
        RoundBorder.create().color(0xbbf0ed).rectangle(true));
        
        //TextComponent tfWeight = new TextComponent().label("Weight");

        Label LWeight = new Label("      Weight ");
        TextField tfWeight = new TextField("");
        tfWeight.getUnselectedStyle().setBorder(
        RoundBorder.create().color(0xbbf0ed).rectangle(true));
        
        
        Button showTransition = new Button("Next ->");
        hi.
                add(LName).
                add(tfName).
                add(LType).
                add(tfType).
                add(LReference).
                add(tfReference).
                add(LMarque).
                add(tfMarque).
                add(showTransition);

        // step 2 for creating product
        Form dest = new Form("      Step 2/3");
        Form finale = new Form("      Step 3/3", new BorderLayout());
        Button step = new Button("                               Next ->");
        dest.getToolbar().addMaterialCommandToLeftBar("", FontImage.MATERIAL_ARROW_BACK, e -> hi.showBack());
        dest.setBgImage(i);
        showTransition.addActionListener((e) -> {
            int h = CommonTransitions.SLIDE_HORIZONTAL;
            hi.setTransitionOutAnimator(CommonTransitions.createFade(700));
            dest.setTransitionOutAnimator(CommonTransitions.createFade(700));
            //  finale.setBgImage(i);
            // step 3 for creating product
            //  finale.getToolbar().addMaterialCommandToLeftBar("", FontImage.MATERIAL_ARROW_BACK, ec -> dest.showBack());

            step.addActionListener((ev) -> {
                int h2 = CommonTransitions.SLIDE_HORIZONTAL;
                dest.setTransitionOutAnimator(CommonTransitions.createFade(700));
                finale.setTransitionOutAnimator(CommonTransitions.createFade(700));

                // photo for creating product
                //Form hin = new Form("Capture", new BorderLayout());
                finale.setToolbar(new Toolbar());
                Style s = UIManager.getInstance().getComponentStyle("Title");
                FontImage icon = FontImage.createMaterial(FontImage.MATERIAL_CAMERA, s);

                ImageViewer iv = new ImageViewer(icon);
                Button Done = new Button("Done");
                finale.getToolbar().addCommandToRightBar(" Choose", icon, (evt) -> {
                    filePath = Capture.capturePhoto();
                    if (filePath != null) {
                        try {
                            DefaultListModel<Image> m = (DefaultListModel<Image>) iv.getImageList();
                            Image img = Image.createImage(filePath);
                            System.out.println(filePath);
                            if (m == null) {
                                m = new DefaultListModel<>(img);
                                iv.setImageList(m);
                                iv.setImage(img);

                            } else {
                                m.addItem(img);
                            }
                            m.setSelectedIndex(m.getSize() - 1);
                        } catch (IOException err) {
                            Log.e(err);
                        }
                    }
                });
                FontImage icon2 = FontImage.createMaterial(FontImage.MATERIAL_DONE, s);
                ImageViewer iv2 = new ImageViewer(icon2);
                finale.getToolbar().addCommandToLeftBar("Done", icon2, (evt) -> {
                    if (ev != null && ev.getSource() != null) {
                        try {
                            if (filePath == null) {
                                dest.showBack();
                            } //                                 filePath = (String) ev.getSource();
                            else {
                            InteractionDialog dlg = new InteractionDialog("Confirmation");
                            dlg.setLayout(new BorderLayout());
                            Button close = new Button("Cancel");
                            Button Add = new Button("Add");
                            close.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent evt) {
                               dlg.disposeToTheTop();
                               hi.show();
                                }
                            });
                            
                            Add.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent evt) {
                             
                                          if (filePath == null) {
                                            Dialog.show("Alert", "Product must have image please choose one ", new Command("OK"));
                                            dlg.disposeToTheTop();
                                            hi.show();
                                          }
                                        if ((tfName.getText().length() == 0) || (tfType.getText().length() == 0)
                                                || (tfMarque.getText().length() == 0) || (tfPriceHT.getText().length() == 0)
                                                || (tfPriceTTC.getText().length() == 0) || (tfTva.getText().length() == 0)
                                                || (tfReference.getText().length() == 0) || (tfWeight.getText().length() == 0)) {
                                            Dialog.show("Alert", "Please fill all the fields", new Command("OK"));
                                            //hi.revalidate();
                                            dlg.disposeToTheTop();
                                            hi.show();
                                        } else {
                                            try {

                                                Product1 t = new Product1(tfName.getText(), tfType.getText(), tfReference.getText(), tfMarque.getText(),
                                                        Float.parseFloat(tfPriceHT.getText()), Float.parseFloat(tfPriceTTC.getText()), Float.parseFloat(tfWeight.getText()),
                                                        Float.parseFloat(tfTva.getText()), filePath);
                                                if (ProductService.getInstance().addTask(t)) {
                                                    //Dialog.show("Success", "Product Added Successfuly", new Command("OK"));
                                                    InteractionDialog dialog = new InteractionDialog("Success");
                                                    dialog.setLayout(new BorderLayout());
                                                    SpanLabel ll=new SpanLabel( "Product Added Successfuly");
                                                    Image ix = Image.createImage("/suuccess.png");
                                                    Label imap=new Label(ix.fill(300,300));
                                                    dialog.add(BorderLayout.CENTER, GridLayout.encloseIn(2, imap, ll));
                                                    Button close = new Button("Close");
                                                     close.addActionListener(new ActionListener() {
                                                    @Override
                                                    public void actionPerformed(ActionEvent evt) {
                                                    dialog.disposeToTheTop();
                                                    hi.show();
                                                    }
                                                    });
                                                    dialog.add(BorderLayout.SOUTH, close);
                                                    dialog.show(750, 750, 0, 0);
                                                    
                                                    dlg.dispose();
                                                    //hi.show();
                                                } else {
                                                    //Dialog.show("ERROR", "Server error", new Command("OK"));
                                                    InteractionDialog dialog = new InteractionDialog("ERROR");
                                                    dialog.setLayout(new BorderLayout());
                                                    SpanLabel ll=new SpanLabel( "Server error");
                                                    Image ix = Image.createImage("/err.jpg");
                                                    Label imap=new Label(ix.fill(200,200));
                                                    dialog.add(BorderLayout.CENTER, GridLayout.encloseIn(2, imap, ll));
                                                    Button close = new Button("Close");
                                                     close.addActionListener(new ActionListener() {
                                                    @Override
                                                    public void actionPerformed(ActionEvent evt) {
                                                    dialog.disposeToTheTop();
                                                    dlg.disposeToTheTop();
                                                    dest.show();
                                                    }
                                                    });
                                                    dialog.add(BorderLayout.SOUTH, close);
                                                    dialog.show(750, 750, 0, 0);
                                                    
                                               // dest.show();
                                                }
                                            } catch (NumberFormatException eb) {
                                                try {
                                                    //Dialog.show("ERROR", "Status must be a number", new Command("OK"));
                                                    InteractionDialog dialog = new InteractionDialog("ERROR");
                                                    dialog.setLayout(new BorderLayout());
                                                    SpanLabel ll=new SpanLabel( "Status must be a number");
                                                    Image ix = Image.createImage("/err.jpg");
                                                    Label imap=new Label(ix.fill(200,200));
                                                    dialog.add(BorderLayout.CENTER, GridLayout.encloseIn(2, imap, ll));
                                                    Button close = new Button("Close");
                                                    close.addActionListener(new ActionListener() {
                                                        @Override
                                                        public void actionPerformed(ActionEvent evt) {
                                                            dialog.disposeToTheTop();
                                                            dlg.disposeToTheTop();
                                                            dest.show();
                                                        }
                                                    });
                                                    dialog.add(BorderLayout.SOUTH, close);
                                                    dialog.show(750, 750, 0, 0);
                                                    
                                                   // dest.show();
                                                } catch (IOException ex) {
                                                }
                                                
                                            } catch (IOException ex) {
                                              }
                                            
                                        }
                             //  dlg.disposeToTheTop();
                                  
                                }
                            });
                            dlg.dispose();
                            SpanLabel ll=new SpanLabel( "Click Add Button to confirm that you  want to add this product please or click Cancel to return in the first step.");
                            dlg.add(BorderLayout.SOUTH, GridLayout.encloseIn(2, close, Add));
                            dlg.add(BorderLayout.CENTER,ll);
                            dlg.show(700, 700, 0, 0);
                            
                          
                                   
                                   
                                   
                                
                                int fileNameIndex = filePath.lastIndexOf("/") + 1;
                                String fileName = filePath.substring(fileNameIndex);
                                EncodedImage encImage = EncodedImage.create("/giphy.gif");
                            }
                        } catch (IOException ex) {

                        }
                    }

                }
                );
                finale.add(BorderLayout.CENTER, iv);
                finale.show();
            });

            dest.removeAll();
            dest 
                    
                    
                    
                    .add(LPriceHT)
                    .add(tfPriceHT)
                    .add(LPriceTTC)
                    .add(tfPriceTTC)
                    .add(LTva)
                    .add(tfTva)
                    .add(LWeight)
                    .add(tfWeight)
                    .add(step);
            dest.show();
        });
    //   hi.getToolbar().addMaterialCommandToLeftBar("", FontImage.MATERIAL_ARROW_BACK, e -> new HomeForm());

        hi.show();

    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

    @Override
    protected void showOtherForm(Resources res) {
        new ProfileGestionnaireForm(res).show();
    }

    @Override
    protected void showOtherForm1(Resources res) {
        new ProfileGestionnaireForm(res).show();
    }

    @Override
    protected void showOtherForm2(Resources res) {
        new ProfileGestionnaireForm(res).show();
    }

    @Override
    protected void showOtherForm3(Resources res) {
        new ProfileGestionnaireForm(res).show();
    }

}
