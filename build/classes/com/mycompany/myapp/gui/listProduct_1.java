package com.mycompany.myapp.gui;

import com.codename1.components.FloatingActionButton;
import com.codename1.components.ImageViewer;
import com.codename1.components.InfiniteProgress;
import com.codename1.components.MultiButton;
import com.codename1.components.OnOffSwitch;
import com.codename1.contacts.Contact;
import com.codename1.db.Database;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.FileSystemStorage;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.io.Storage;
import com.codename1.io.Util;
import com.codename1.ui.Button;
import com.codename1.ui.CheckBox;
import com.codename1.ui.ComboBox;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import static com.codename1.ui.Component.BOTTOM;
import com.codename1.ui.Container;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Graphics;
import com.codename1.ui.Image;
import com.codename1.ui.Slider;
import com.codename1.ui.TextField;
import com.codename1.ui.URLImage;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.spinner.Picker;
import com.mycompany.myapp.entities.Product1;
import com.mycompany.myapp.services.ProductService;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;


/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class listProduct_1 extends SideMenuGestionnaireForm {

    private Form current;
    private Resources theme;
    String URL = "http://localhost/pidev/web/uploads/post/";
    String url = "http://localhost/images/";
    EncodedImage ecoEncodedImage;
    ImageViewer imgaViewer;
    Image imgaa;
    ImageViewer imgViewer;
    Image img;
    int i;
    ImageViewer imgaViewerdet;
    static String filePath;
    Container titleCmp=null;


    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        try {
            Form hi = new Form("Product List", BoxLayout.y());
               Toolbar tb = getToolbar();
                      tb=hi.getToolbar();

        tb.setTitleCentered(false);
         
        Button menuButton = new Button("");
        menuButton.setUIID("Title");
        FontImage.setMaterialIcon(menuButton, FontImage.MATERIAL_MENU);
        menuButton.addActionListener(e -> getToolbar().openSideMenu());
         Container remainingTasks = BoxLayout.encloseY(
                        new Label("12", "CenterTitle"),
                        new Label("users", "CenterSubTitle")
                );
        remainingTasks.setUIID("RemainingTasks");
        Container completedTasks = BoxLayout.encloseY(
                        new Label("32", "CenterTitle"),
                        new Label("employees", "CenterSubTitle")
        );
        completedTasks.setUIID("CompletedTasks");
         titleCmp= BoxLayout.encloseY(
                        FlowLayout.encloseIn(menuButton),
                        BorderLayout.centerAbsolute(
                                BoxLayout.encloseY(
                                    new Label(LoginForm.nom+" "+LoginForm.prenom, "Title"),
                                    new Label("Client", "SubTitle")
                                )
                            ),
                         GridLayout.encloseIn(2, remainingTasks, completedTasks)
                );
         tb.setTitleComponent(titleCmp);
            setupSideMenu(theme);
            Image in = Image.createImage("/bes.jpg");
            hi.setBgImage(in);
            hi.revalidate();
            try {
                ecoEncodedImage = EncodedImage.create("/giphy.gif");
                ecoEncodedImage.scale(70, 70);
            } catch (IOException ex) {
                
            }
            int fiveMM = Display.getInstance().convertToPixels(5);
            
            ArrayList<Product1> listp = new ArrayList<Product1>();
            for (i = 0; i < ProductService.getInstance().getAllTasks().size(); i++) {
                int idd = ProductService.getInstance().getAllTasks().get(i).getId();
                String nameProd = ProductService.getInstance().getAllTasks().get(i).getProductName();
                String TypeProd = ProductService.getInstance().getAllTasks().get(i).getProductType();
                String RefProd = ProductService.getInstance().getAllTasks().get(i).getReference();
                String MarqueProd = ProductService.getInstance().getAllTasks().get(i).getMarque();
                float PriceHtProd = ProductService.getInstance().getAllTasks().get(i).getPriceHT();
                float PriceTTcProd = ProductService.getInstance().getAllTasks().get(i).getPriceTTC();
                float WeightProd = ProductService.getInstance().getAllTasks().get(i).getWeight();
                float TvaProd = ProductService.getInstance().getAllTasks().get(i).getTva();
                String PhotoProd = ProductService.getInstance().getAllTasks().get(i).getPhoto();
                Product1 t = new Product1(idd, nameProd, TypeProd, RefProd, MarqueProd, PriceHtProd, PriceTTcProd, WeightProd, TvaProd, PhotoProd);
                listp.add(t);
            }
            Toolbar.setGlobalToolbar(true);
            
            hi.add(new InfiniteProgress());
            
            FloatingActionButton fab = FloatingActionButton.createFAB(FontImage.MATERIAL_ADD);
            fab.getAllStyles().setBgColor(0x2e4345);
            fab.createSubFAB(FontImage.MATERIAL_HOUSE, "").addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    new AddEntrepot();
                }
            });
            fab.createSubFAB(FontImage.MATERIAL_IMPORT_CONTACTS, "").addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    try {
                        new ajoutprod().start();
                    } catch (IOException ex) {
                    }
                }
            });
            
            fab.bindFabToContainer(hi.getContentPane());
            
            Display.getInstance().scheduleBackgroundTask(() -> {
                // this will take a while...
                Contact[] cnts = Display.getInstance().getAllContacts(true, true, true, true, false, false);
                Display.getInstance().callSerially(() -> {
                    hi.removeAll();
                    for (Product1 c : listp) {
                        String mg = c.getPhoto();
                        if (mg == null) {
                            try {
                                Image i = Image.createImage("/no.png");
                                imgViewer = new ImageViewer(i);
                                MultiButton m = new MultiButton();
                                m.setTextLine1(c.getProductName());
                                m.setTextLine2(c.getProductType());
                                m.setTextLine3(String.valueOf(c.getPriceHT()));
                                m.setIcon((i.fill(300, 300)));
                                m.addActionListener(new ActionListener() {
                                    @Override
                                    public void actionPerformed(ActionEvent evt) {
                                        new PDetail(c);
                                    }
                                });
                            } catch (IOException ex) {
                            }
                            
                        } else {
                            Image imgc = URLImage.createToStorage(ecoEncodedImage, c.getPhoto(), URL + mg, URLImage.RESIZE_SCALE);
                            //imgViewer = new ImageViewer(img);
                            MultiButton m = new MultiButton();
                            m.setTextLine1(c.getProductName());
                            m.setTextLine2(c.getProductType());
                            m.setTextLine3(String.valueOf(c.getPriceHT() + " TND "));
                            int width = imgc.getWidth() / 2;
                            //Image capturedImage = Image.createImage(Capture.capturePhoto(width, -1));
                            Image roundMask = Image.createImage(imgc.getWidth(), imgc.getHeight(), 0xff000000);
                            Graphics gr = roundMask.getGraphics();
                            gr.setColor(0xffffff);
                            gr.fillArc(0, 0, imgc.getWidth(), imgc.getWidth(), 0, 360);
                            Object mask = roundMask.createMask();
                            imgc = imgc.applyMask(mask);
                            // Label l = new Label(img);
                            // l.setIcon(ima.fill(800, 800));
                            // l.setWidth(1);
                            // l.setHeight(1);
                            //    l.getAllStyles().setMargin(10, 0, 300, 300);
                            //   l.getAllStyles().setPadding(0, 0, 0, 0);
                            
                            m.setIcon((imgc.fill(300, 300)));
                            m.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent evt) {
                                    new PDetail(c);
                                }
                            });
                            hi.add(m);
                            
                        }
                    }
                    hi.revalidate();
                });
            });
            
            hi.getToolbar().addSearchCommand(e -> {
                String text = (String) e.getSource();
                if (text == null || text.length() == 0) {
                    // clear search
                    for (Component cmp : hi.getContentPane()) {
                        cmp.setHidden(false);
                        cmp.setVisible(true);
                    }
                    hi.getContentPane().animateLayout(150);
                } else {
                    text = text.toLowerCase();
                    for (Component cmp : hi.getContentPane()) {
                        MultiButton mb = (MultiButton) cmp;
                        String line1 = mb.getTextLine1();
                        String line2 = mb.getTextLine2();
                        String line3 = mb.getTextLine3();
                        boolean show = line1 != null && line1.toLowerCase().indexOf(text) > -1
                                || line2 != null && line2.toLowerCase().indexOf(text) > -1;
                        mb.setHidden(!show);
                        mb.setVisible(show);
                    }
                    hi.getContentPane().animateLayout(150);
                }
            }, 4);
//hi.setComponentState(Component.CENTER,btnplus);
// hi.add(btnplus);
hi.show();
        } catch (IOException ex) {

        }
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

    @Override
    protected void showOtherForm(Resources res) {
        new ProfileGestionnaireForm(res).show();
    }

    @Override
    protected void showOtherForm1(Resources res) {
        new ProfileGestionnaireForm(res).show();
    }

    @Override
    protected void showOtherForm2(Resources res) {
        new ProfileGestionnaireForm(res).show();
    }

    @Override
    protected void showOtherForm3(Resources res) {
        new ProfileGestionnaireForm(res).show();
    }

}
